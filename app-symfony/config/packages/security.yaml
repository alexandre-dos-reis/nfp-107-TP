security:
    enable_authenticator_manager: true

    password_hashers:
        App\Entity\User:
            algorithm: plaintext
        App\Entity\Employee:
            algorithm: plaintext

    providers:
        client:
            entity: { class: App\Entity\User, property: email }
        employee:
            entity: { class: App\Entity\Employee, property: email }
        # https://symfony.com/doc/3.4/security/multiple_user_providers.html
        users:
            chain:
                providers: [client, employee]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users
            form_login:
                login_path: login
                check_path: login
                enable_csrf: true
            logout:
                path: logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            # https://symfony.com/doc/current/security/passwords.html
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: plaintext
                # cost: 4 # Lowest possible value for bcrypt
                # time_cost: 3 # Lowest possible value for argon
                # memory_cost: 10 # Lowest possible value for argon
